#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'dockit_version'
require 'dockit'


include GLI

program_desc 'Describe your application here'

version Dockit::VERSION

desc 'Describe some switch here'
switch [:s,:switch]

desc 'Describe some flag here'
default_value 'the default'
arg_name 'The name of the argument'
flag [:f,:flagname]

desc 'Describe export here'
arg_name 'Describe arguments to export here'
command :export do |c|
  c.desc 'Describe a switch to export'
  c.switch :s

  c.desc 'Describe a flag to export'
  c.default_value 'default'
  c.flag :f
  c.action do |global_options,options,args|

    # Your command logic here
     
    # If you have any errors, just raise them
    # raise "that command made no sense"

    # create Toc

   # sidebar = "#{args[0]}/_Sidebar.md"

    #toc = {}

    #master_md = Dockit::Merge.new("#{args[0]}" , "_Sidebar.md")
    #wiki =  Dockit::Wiki.new("#{args[0]}")
    #wiki.fetch

    master_md = Dockit::Merge.new()
    master_md.merge
    #master_md.toc.each do |line|
      #puts line
    #end




   #puts master_md.toc.inspect


   # if File.exist?(sidebar) && File.readable_real?(sidebar) then
    #  sidebar_data = IO.readlines(sidebar)


    #  sidebar_data.each_with_index do |line,i|

     #   puts "line #{i}: #{line.strip!}"


     # end

   # end

    #puts args.kind_of?(Array)
    #files = Dir.entries(args[0])
    #files.each do  |name|

   # end
    #Dir.foreach(args) { |filenames|
     #   filenames.each{ |name| puts name}
   #}
  end
end


desc 'Merge - merge files to one document'
arg_name 'Describe arguments to add here'
command :add do |c|
  c.action do |global_options,options,args|
  end
end


desc 'Describe add here'
arg_name 'Describe arguments to add here'
command :add do |c|
  c.action do |global_options,options,args|
  end
end

desc 'Describe list here'
arg_name 'Describe arguments to list here'
command :list do |c|
  c.action do |global_options,options,args|
  end
end

desc 'Describe remove here'
arg_name 'Describe arguments to remove here'
command :remove do |c|
  c.action do |global_options,options,args|
  end
end

desc 'Sample - demo only'
arg_name 'Arguments'
command :sample do |c|
  c.action do | global_options, options , args|
    puts "Global:"
    puts "-f - #{global_options[:f]}"
    puts "Command:"
    puts "-f - #{options[:f] ? 'true' : 'false'}"
    puts "-p - #{options[:p]}"
    puts "args - #{args.join(',')}"

  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abourt and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
